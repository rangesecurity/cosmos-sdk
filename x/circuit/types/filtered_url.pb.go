// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/circuit/v1/filtered_url.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FilteredUrls are message urls which have had a circuit tripped and
// are unable to be invoked by most users. FilteredUrls have an optional expiration timestamp
// associated with the rule that can automatically untrip a circuit
type FilteredUrl struct {
	// addresses which are permitted to bypass tripped circuits
	BypassSet []string `protobuf:"bytes,1,rep,name=bypass_set,json=bypassSet,proto3" json:"bypass_set,omitempty"`
	// the unix timestamp at which a tripped circuit for this particular url expires at
	ExpiresAt int64 `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (m *FilteredUrl) Reset()         { *m = FilteredUrl{} }
func (m *FilteredUrl) String() string { return proto.CompactTextString(m) }
func (*FilteredUrl) ProtoMessage()    {}
func (*FilteredUrl) Descriptor() ([]byte, []int) {
	return fileDescriptor_33449f4d98e5d1fc, []int{0}
}
func (m *FilteredUrl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilteredUrl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilteredUrl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilteredUrl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilteredUrl.Merge(m, src)
}
func (m *FilteredUrl) XXX_Size() int {
	return m.Size()
}
func (m *FilteredUrl) XXX_DiscardUnknown() {
	xxx_messageInfo_FilteredUrl.DiscardUnknown(m)
}

var xxx_messageInfo_FilteredUrl proto.InternalMessageInfo

func (m *FilteredUrl) GetBypassSet() []string {
	if m != nil {
		return m.BypassSet
	}
	return nil
}

func (m *FilteredUrl) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func init() {
	proto.RegisterType((*FilteredUrl)(nil), "cosmos.circuit.v1.FilteredUrl")
}

func init() {
	proto.RegisterFile("cosmos/circuit/v1/filtered_url.proto", fileDescriptor_33449f4d98e5d1fc)
}

var fileDescriptor_33449f4d98e5d1fc = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0xce, 0x2f, 0xce,
	0xcd, 0x2f, 0xd6, 0x4f, 0xce, 0x2c, 0x4a, 0x2e, 0xcd, 0x2c, 0xd1, 0x2f, 0x33, 0xd4, 0x4f, 0xcb,
	0xcc, 0x29, 0x49, 0x2d, 0x4a, 0x4d, 0x89, 0x2f, 0x2d, 0xca, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x84, 0xa8, 0xd2, 0x83, 0xaa, 0xd2, 0x2b, 0x33, 0x54, 0xf2, 0xe6, 0xe2, 0x76, 0x83,
	0x2a, 0x0c, 0x2d, 0xca, 0x11, 0x92, 0xe5, 0xe2, 0x4a, 0xaa, 0x2c, 0x48, 0x2c, 0x2e, 0x8e, 0x2f,
	0x4e, 0x2d, 0x91, 0x60, 0x54, 0x60, 0xd6, 0xe0, 0x0c, 0xe2, 0x84, 0x88, 0x04, 0xa7, 0x96, 0x80,
	0xa4, 0x53, 0x2b, 0x0a, 0x32, 0x8b, 0x52, 0x8b, 0xe3, 0x13, 0x4b, 0x24, 0x98, 0x14, 0x18, 0x35,
	0x98, 0x83, 0x38, 0xa1, 0x22, 0x8e, 0x25, 0x4e, 0x66, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24,
	0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78,
	0x2c, 0xc7, 0x10, 0x25, 0x03, 0xb1, 0xb9, 0x38, 0x25, 0x5b, 0x2f, 0x33, 0x5f, 0xbf, 0x02, 0xee,
	0xce, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0xf3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xcd, 0x90, 0x03, 0xf1, 0xc6, 0x00, 0x00, 0x00,
}

func (m *FilteredUrl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilteredUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilteredUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != 0 {
		i = encodeVarintFilteredUrl(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BypassSet) > 0 {
		for iNdEx := len(m.BypassSet) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BypassSet[iNdEx])
			copy(dAtA[i:], m.BypassSet[iNdEx])
			i = encodeVarintFilteredUrl(dAtA, i, uint64(len(m.BypassSet[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilteredUrl(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilteredUrl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FilteredUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BypassSet) > 0 {
		for _, s := range m.BypassSet {
			l = len(s)
			n += 1 + l + sovFilteredUrl(uint64(l))
		}
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovFilteredUrl(uint64(m.ExpiresAt))
	}
	return n
}

func sovFilteredUrl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilteredUrl(x uint64) (n int) {
	return sovFilteredUrl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FilteredUrl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilteredUrl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilteredUrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilteredUrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BypassSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilteredUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilteredUrl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilteredUrl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BypassSet = append(m.BypassSet, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilteredUrl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilteredUrl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilteredUrl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilteredUrl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilteredUrl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilteredUrl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilteredUrl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilteredUrl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilteredUrl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilteredUrl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilteredUrl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilteredUrl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilteredUrl = fmt.Errorf("proto: unexpected end of group")
)
